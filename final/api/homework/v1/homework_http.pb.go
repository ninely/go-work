// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.3.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationHomeworkFindSolution = "/homework.v1.Homework/FindSolution"
const OperationHomeworkGetRecords = "/homework.v1.Homework/GetRecords"

type HomeworkHTTPServer interface {
	FindSolution(context.Context, *FindSolutionRequest) (*FindSolutionReply, error)
	GetRecords(context.Context, *GetRecordsRequest) (*GetRecordsReply, error)
}

func RegisterHomeworkHTTPServer(s *http.Server, srv HomeworkHTTPServer) {
	r := s.Route("/")
	r.POST("/find-answer", _Homework_FindSolution0_HTTP_Handler(srv))
	r.GET("/records/{user_id}", _Homework_GetRecords0_HTTP_Handler(srv))
}

func _Homework_FindSolution0_HTTP_Handler(srv HomeworkHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindSolutionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHomeworkFindSolution)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindSolution(ctx, req.(*FindSolutionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FindSolutionReply)
		return ctx.Result(200, reply)
	}
}

func _Homework_GetRecords0_HTTP_Handler(srv HomeworkHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRecordsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHomeworkGetRecords)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRecords(ctx, req.(*GetRecordsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRecordsReply)
		return ctx.Result(200, reply)
	}
}

type HomeworkHTTPClient interface {
	FindSolution(ctx context.Context, req *FindSolutionRequest, opts ...http.CallOption) (rsp *FindSolutionReply, err error)
	GetRecords(ctx context.Context, req *GetRecordsRequest, opts ...http.CallOption) (rsp *GetRecordsReply, err error)
}

type HomeworkHTTPClientImpl struct {
	cc *http.Client
}

func NewHomeworkHTTPClient(client *http.Client) HomeworkHTTPClient {
	return &HomeworkHTTPClientImpl{client}
}

func (c *HomeworkHTTPClientImpl) FindSolution(ctx context.Context, in *FindSolutionRequest, opts ...http.CallOption) (*FindSolutionReply, error) {
	var out FindSolutionReply
	pattern := "/find-answer"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationHomeworkFindSolution))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *HomeworkHTTPClientImpl) GetRecords(ctx context.Context, in *GetRecordsRequest, opts ...http.CallOption) (*GetRecordsReply, error) {
	var out GetRecordsReply
	pattern := "/records/{user_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHomeworkGetRecords))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
