// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: solve/v1/solve.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SolveClient is the client API for Solve service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SolveClient interface {
	// 获取答案
	SolveQuestion(ctx context.Context, in *SolveQuestionRequest, opts ...grpc.CallOption) (*SolveQuestionReply, error)
	// 更新题目结果
	UpdateDetailSolution(ctx context.Context, in *UpdateDetailSolutionRequest, opts ...grpc.CallOption) (*UpdateDetailSolutionReply, error)
}

type solveClient struct {
	cc grpc.ClientConnInterface
}

func NewSolveClient(cc grpc.ClientConnInterface) SolveClient {
	return &solveClient{cc}
}

func (c *solveClient) SolveQuestion(ctx context.Context, in *SolveQuestionRequest, opts ...grpc.CallOption) (*SolveQuestionReply, error) {
	out := new(SolveQuestionReply)
	err := c.cc.Invoke(ctx, "/parse.v1.Solve/SolveQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solveClient) UpdateDetailSolution(ctx context.Context, in *UpdateDetailSolutionRequest, opts ...grpc.CallOption) (*UpdateDetailSolutionReply, error) {
	out := new(UpdateDetailSolutionReply)
	err := c.cc.Invoke(ctx, "/parse.v1.Solve/UpdateDetailSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SolveServer is the server API for Solve service.
// All implementations must embed UnimplementedSolveServer
// for forward compatibility
type SolveServer interface {
	// 获取答案
	SolveQuestion(context.Context, *SolveQuestionRequest) (*SolveQuestionReply, error)
	// 更新题目结果
	UpdateDetailSolution(context.Context, *UpdateDetailSolutionRequest) (*UpdateDetailSolutionReply, error)
	mustEmbedUnimplementedSolveServer()
}

// UnimplementedSolveServer must be embedded to have forward compatible implementations.
type UnimplementedSolveServer struct {
}

func (UnimplementedSolveServer) SolveQuestion(context.Context, *SolveQuestionRequest) (*SolveQuestionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolveQuestion not implemented")
}
func (UnimplementedSolveServer) UpdateDetailSolution(context.Context, *UpdateDetailSolutionRequest) (*UpdateDetailSolutionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDetailSolution not implemented")
}
func (UnimplementedSolveServer) mustEmbedUnimplementedSolveServer() {}

// UnsafeSolveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SolveServer will
// result in compilation errors.
type UnsafeSolveServer interface {
	mustEmbedUnimplementedSolveServer()
}

func RegisterSolveServer(s grpc.ServiceRegistrar, srv SolveServer) {
	s.RegisterService(&Solve_ServiceDesc, srv)
}

func _Solve_SolveQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolveQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolveServer).SolveQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parse.v1.Solve/SolveQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolveServer).SolveQuestion(ctx, req.(*SolveQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Solve_UpdateDetailSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDetailSolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolveServer).UpdateDetailSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parse.v1.Solve/UpdateDetailSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolveServer).UpdateDetailSolution(ctx, req.(*UpdateDetailSolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Solve_ServiceDesc is the grpc.ServiceDesc for Solve service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Solve_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "parse.v1.Solve",
	HandlerType: (*SolveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SolveQuestion",
			Handler:    _Solve_SolveQuestion_Handler,
		},
		{
			MethodName: "UpdateDetailSolution",
			Handler:    _Solve_UpdateDetailSolution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "solve/v1/solve.proto",
}
